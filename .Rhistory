demo()
R()
clear
clear()
cls
library(knitr)
knitr::opts_chunk$set(fig.align = "center",
fig.width = 10,
fig.height = 10,
dev = "png",
cache = FALSE)
library(tidyverse)
library(readr)
library(forcats) #to work with factors
library(maps)
library(patchwork)#to put plots next to each other
library(tidytext)
library(stopwords)
library(ggrepel)
library(tidymodels)
library(tidyverse)
library(readr)
library(forcats) #to work with factors
library(maps)
library(patchwork)#to put plots next to each other
library(tidytext)
library(stopwords)
library(ggrepel)
library(tidymodels)
library(tidyverse)
library(readr)
library(forcats) #to work with factors
library(maps)
library(patchwork)#to put plots next to each other
library(tidytext)
library(stopwords)
library(ggrepel)
library(tidymodels)
library(knitr)
knitr::opts_chunk$set(fig.align = "center",
fig.width = 10,
fig.height = 10,
dev = "png",
cache = FALSE)
library(tidyverse)
library(readr)
library(forcats) #to work with factors
library(maps)
library(patchwork)#to put plots next to each other
library(tidytext)
library(stopwords)
library(ggrepel)
library(tidymodels)
library(knitr)
knitr::opts_chunk$set(fig.align = "center",
fig.width = 10,
fig.height = 10,
dev = "png",
cache = FALSE)
install.packages('knitr')
library(knitr)
knitr::opts_chunk$set(fig.align = "center",
fig.width = 10,
fig.height = 10,
dev = "png",
cache = FALSE)
library(knitr)
knitr::opts_chunk$set(fig.align = "center",
fig.width = 10,
fig.height = 10,
dev = "png",
cache = FALSE)
library(tidyverse)
library(readr)
library(forcats) #to work with factors
library(maps)
library(patchwork)#to put plots next to each other
library(tidytext)
library(stopwords)
library(ggrepel)
library(tidymodels)
install.packages('tidyverse')
install.packages('tidyverse')
library(knitr)
knitr::opts_chunk$set(fig.align = "center",
fig.width = 10,
fig.height = 10,
dev = "png",
cache = FALSE)
library(tidyverse)
library(readr)
library(forcats) #to work with factors
library(maps)
library(patchwork)#to put plots next to each other
library(tidytext)
library(stopwords)
library(ggrepel)
library(tidymodels)
install.packages('tidyverse')
install.packages("tidyverse")
library(tidyverse)
library(readr)
library(forcats) #to work with factors
library(maps)
library(patchwork)#to put plots next to each other
library(tidytext)
library(stopwords)
library(ggrepel)
library(tidymodels)
install.packages('ggrepel')
library(tidyverse)
library(readr)
library(forcats) #to work with factors
library(maps)
library(patchwork)#to put plots next to each other
library(tidytext)
library(stopwords)
library(ggrepel)
library(tidymodels)
install.packages('patchwork')
install.packages('stopwords')
install.packages('ggrepel')
install.packages("ggrepel")
library(tidyverse)
library(readr)
library(forcats) #to work with factors
library(maps)
library(patchwork)#to put plots next to each other
library(tidytext)
library(stopwords)
library(ggrepel)
library(tidymodels)
install.packages('tidymodels')
library(tidyverse)
library(readr)
library(forcats) #to work with factors
library(maps)
library(patchwork)#to put plots next to each other
library(tidytext)
library(stopwords)
library(ggrepel)
library(tidymodels)
install.packages('maps')
install.packages('tidytext')
library(tidyverse)
library(readr)
library(forcats) #to work with factors
library(maps)
library(patchwork)#to put plots next to each other
library(tidytext)
library(stopwords)
library(ggrepel)
library(tidymodels)
RD_Toronto <- read_csv("H:/My Drive/UOIT/Teaching/2024/2024 Fall/2024 Fall MBAI 5100/Lecture 1, Sep 9/RawData/Toronto_RawData.csv")
RD_Vancouver <- read_csv("H:/My Drive/UOIT/Teaching/2024/2024 Fall/2024 Fall MBAI 5100/Lecture 1, Sep 9/RawData/Vancouver_RawData.csv")
RD_Toronto %>%
summary()
RD_Toronto %>%
slice(1:2) %>%
DT::datatable(class = 'cell-border stripe', options = list(pageLength = nrow(2)))
#RD_Toronto %>%
#  summarise_all(class) %>%
#  view()
library(knitr)
knitr::opts_chunk$set(fig.align = "center",
fig.width = 10,
fig.height = 10,
dev = "png",
cache = FALSE)
knitr::opts_chunk$set(echo = FALSE,
fig.align = "center",
#                      fig.width = 4,
#                      fig.height = 4,
dev = "png",
cache = FALSE)
1 + 2
44 - 32
5 * 11
2 ^ 3
2 ^ 1 ^ 3
98 / 9
98 %/% 9 #integer division
98 %% 9 #integer remainder
3 + 6 * 2
3 > 5
2 == 4 / 2
3 != 4
TRUE | FALSE
TRUE & FALSE
3+4
150 / (6 + 24)``` - 5
150 / (6 + 24) - 5
a <- c(1,2,3)
typeof(a)
a <- c(1,2,"3")
typeof(a)
a <- c(1,2,3)
typeof(a)
a <- c(1,2,3.2)
typeof(a)
a <- c(1.1, 2.2, 3.2)
typeof(a)
c()?
#
```
a <- list(1,3,"Hassan")
typeof(a)
5/6 == as.character(5/6)
5/6 == as.character(5/6)
5/6 == as.numeric(as.character(5/6))
5 == "5"
5 == as.numeric("5")
5/6 == as.numeric("5/6")
5 == as.numeric("5")
x <- 0:6
x
len(x)
length(x)
x[0]
x[1]
x[3]
x <- 1:6
x[3]
x[(3,4)]
x[c(3,4)]
x % 2 == 0
x %% 2 == 0
x // 2 == 0
x / 2 == 0
x / 2
x <- 1:10
x / 2
transactions_data
library(tidyverse)
library(dplyr)
library(ggplot2)
library(readr)
# Question 1 answer:----
# importing customer data:
customers_data <- read_csv("G:/My Drive/MBAI/BusinessAnalytics/Assignments/Assignment1/customers_data.csv")
# importing products data:
products_data <- read_csv("G:/My Drive/MBAI/BusinessAnalytics/Assignments/Assignment1/products_data.csv")
#importing transactions data:
transactions_data <- read_csv("G:/My Drive/MBAI/BusinessAnalytics/Assignments/Assignment1/transactions_data.csv")
transactions_data
head(transactions_data, 10)
is_tibble(customers_data)
glimpse(customers_data)
glimpse(products_data)
glimpse(transactions_data)
str(transactions_data)
transactions_data <- as.Date(transactions_data$Date, format = "%m/%d/%Y")
str(transactions_data)
transactions_data <- as.Date(transactions_data$Date, format = "%m/%d/%Y")
str(transactions_data)
transactions_data
transactions_data <- read_csv("G:/My Drive/MBAI/BusinessAnalytics/Assignments/Assignment1/transactions_data.csv")
head(transactions_data, 10)
transactions_data$Date <- as.Date(transactions_data$Date, format = "%m/%d/%Y")
str(transactions_data)
transactions_data
transactions_2023 <- transactions_data %>%
filter(YEAR == 2023)
transactions_2023 <- transactions_data %>%
filter(Year == 2023)
head(transactions_2023, 10)
glimpse(transactions_2023)
customer_summary <- transactions_data %>%
#Grouping by customer id as it is unique for each customer:
group_by(Customer_ID) %>%
#summarizing the previous output to get the count and the total amount spent:
summarise(
Total_Transactions = n(),
Total_Amount_Spent = sum(Total_Amount)
)
head(customer_summary, 10)
joined_customers_data <- left_join(customers_data, customer_summary, by="Customer_ID")
customer_summary <- transactions_data %>%
#Grouping by customer id as it is unique for each customer:
group_by(Customer_ID) %>%
#summarizing the previous output to get the count and the total amount spent:
summarise(
Number_of_Transactions = n(),
Total_Amount_Spent = sum(Total_Amount)
)
head(customer_summary, 10)
premium_customers <- customers_data %>%
inner_join(customer_summary, by=Customer_ID) %>%
filter(Total_Amount_Spent >= 10000) %>%
rename(Total_Transaction = Total_Amount_Spent) %>%
select(-Number_of_Transactions)
premium_customers <- customers_data %>%
inner_join(customer_summary, by="Customer_ID") %>%
filter(Total_Amount_Spent >= 10000) %>%
rename(Total_Transaction = Total_Amount_Spent) %>%
select(-Number_of_Transactions)
head(premium_customers, 10)
premium_customers
glimpse(premium_customers)
products_data
transactions_data
products_transaction <- transactions_data %>%
inner_join(products_data, by="Product_ID") %>%
group_by(Category) %>%
summarise(Numeber_of_Transactions= n())
ggplot(products_transaction,
#setting up the aesthetics:
aes(x= Category, y=Number_of_Transactions)) +
# setting up the bar plot
geom_bar(stat = "identity", fill = "darkorange") +
#setting up the titles and labels:
labs(title = "Number of Transactions by Product category",
x = "Products Category",
y = "Number of Transactions") +
theme_minimal()
products_transaction <- transactions_data %>%
# joinning the products data:
inner_join(products_data, by="Product_ID") %>%
# grouping by Category:
group_by(Category) %>%
# calculating the total number od transactions by category:
summarise(Numeber_of_Transactions= n())
products_transaction
ggplot(products_transaction,
#setting up the aesthetics:
aes(x= Category, y=Number_of_Transactions)) +
# setting up the bar plot
geom_bar(stat = "identity", fill = "#FF8C00") +
#setting up the titles and labels:
labs(title = "Number of Transactions by Product category",
x = "Products Category",
y = "Number of Transactions") +
theme_minimal()
products_transaction <- transactions_data %>%
# joinning the products data:
inner_join(products_data, by="Product_ID") %>%
# grouping by Category:
group_by(Category) %>%
# calculating the total number od transactions by category:
summarise(Number_of_Transactions= n())
products_transaction
ggplot(products_transaction,
#setting up the aesthetics:
aes(x= Category, y=Number_of_Transactions)) +
# setting up the bar plot
geom_bar(stat = "identity", fill = "#FF8C00") +
#setting up the titles and labels:
labs(title = "Number of Transactions by Product category",
x = "Products Category",
y = "Number of Transactions") +
theme_minimal()
Discount = 0.10
transactions_data <- transactions_data %>%
mutate(Discounted_Amount = ifelse(Total_Amount > 100, Total_Amount * (1 - Discount), Total_Amount))
head(transactions_data)
library(dplyr)
recession_indicator <- read.csv("./CanadaRecessionIndicator.csv")
rates <-read.csv("./clean_rates.csv")
home_prices <- read.csv("./GTA_HomePrice_History.csv")
primary_keys <- read.csv("./prim_key.csv")
prices_recessionb <- inner_join(home_prices, recession_indicator, by = "Year_Quarter_Key")
prices_recession <- inner_join(home_prices, recession_indicator, by = "Year_Quarter_Key")
library(dplyr)
recession_indicator <- read.csv("./CanadaRecessionIndicator.csv")
rates <-read.csv("./clean_rates.csv")
home_prices <- read.csv("./GTA_HomePrice_History.csv")
primary_keys <- read.csv("./prim_key.csv")
setwd("G:/My Drive/MBAI/BusinessAnalytics/FinalProject/HousingMarket-BA")
library(dplyr)
recession_indicator <- read.csv("./CanadaRecessionIndicator.csv")
rates <-read.csv("./clean_rates.csv")
home_prices <- read.csv("./GTA_HomePrice_History.csv")
primary_keys <- read.csv("./prim_key.csv")
prices_recession <- inner_join(home_prices, recession_indicator, by = "Year_Quarter_Key")
merged_data <- inner_join(prices_recession, rates, by = "Year_Quarter_Key")
head(merged_data)
data_q_report(merged_data)
data_q_report <- function(data) {
if (!is.data.frame(data)) {
stop("Input must be a data frame.")
}
# 1. View Columns
cat("Column Names:\n")
print(colnames(data))
# 2. Check for Nulls
null_counts <- sapply(data, function(x) sum(is.na(x)))
cat("\nNull counts per column:\n")
print(null_counts)
# Identify columns with any null values
columns_with_nulls <- colnames(data)[apply(data, 2, anyNA)]
cat("\nColumns with null values:\n")
print(columns_with_nulls)
# 3. Check for Duplicates
duplicates <- data[duplicated(data), ]
cat("\nDuplicate rows:\n")
print(duplicates)
# 4. Summary Report
cat("\nSummary Report:\n")
cat("Total Columns:", ncol(data), "\n")
cat("Total Rows:", nrow(data), "\n")
cat("Columns with Nulls:", paste(columns_with_nulls, collapse = ", "), "\n")
cat("Number of Duplicate Rows:", nrow(duplicates), "\n")
}
data_q_report(merged_data)
selected_data <- merged_data %>%
select(-4,-12,-13,-14,-15,-16,-17,-18)
head(selected_data)
selected_data <- merged_data %>%
select(-1,-4,-12,-13,-14,-15,-16,-17,-18)
head(selected_data)
library(ggplot2)
#install.packages('corrplot')
library(corrplot)
library(stats)
summary_stats <-  selected_data %>%
select(Sales, Dollar_Volume, Average_Price, New_Listings, Average_SP_LP, Average_DOM) %>%
summary()
print(summary_stats)
summary_stats <-  selected_data %>%
select(Sales, Dollar_Volume, Average_Price, New_Listings) %>%
summary()
print(summary_stats)
ggplot(merged_data, aes(x = X_Year.x, y = Average_Price)) +
geom_col() +
labs(title = "Average Price over Time", x = "Year Quarter", y = "Average Price") +
theme_minimal()
library(tidygeocoder)
install.packages("tidygeocoder")
library(tidygeocoder)
head(selected_data)
final_data <- selected_data %>%
geocode(Municipality, method="osm", lat = latitude, long=longitude)
head(final_data)
