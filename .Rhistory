# Assignment 1 for BUSI 5100
#
#
#
# Full Name: Hassan Mehmood
# Student ID: 100993290
# Email Address: hassan.mehmood@ontariotechu.net
#
#
#
#Load all required libraries here:----
library(tidyverse)
library(dplyr)
library(ggplot2)
library(readr)
### relative path ###
# Question 1 answer:----
customer_data <- read_csv("G:/My Drive/MBAI/BusinessAnalytics/Assignments/Assignment1/customers_data.csv")
products_data <- read_csv("G:/My Drive/MBAI/BusinessAnalytics/Assignments/Assignment1/products_data.csv")
transactions_data <- read_csv("G:/My Drive/MBAI/BusinessAnalytics/Assignments/Assignment1/transactions_data.csv")
is_tibble(customer_data)
head(transactions_data, 10)
# Question 2 answer:----customer_data --> [Rows: 2500, columns: 11], products_data --> [Rows:100 , Columns:6], transactions_data --> [Rows:15033, Columns:11]
### Data Types may need to be changed ###
### Making this more effecient ###
glimpse(customer_data)
glimpse(products_data)
glimpse(transactions_data)
# Question 3 answer:----
transactions_2023 <- transactions_data %>%
filter(Year == 2023)
head(transactions_2023, 10)
# Question 4 answer:----
customer_summary <- transactions_data %>%
group_by(Customer_ID) %>%
summarise(total_transactions = sum(Total_Amount))
head(customer_summary, 10)
# Question 5 answer:----
customer_data
joined_tibles <-left_join(customer_data, customer_summary, by="Customer_ID")
joined_tibbles
mask <- joined_tibbles$total_transactions >= 10000
premium_customers <-  joined_tibbles[mask,]
head(premium_customers, 10)
tail(premium_customers, 10)
# Question 6 answer:----
products_transaction <- left_join(products_data, transactions_data,  by="Product_ID")
category_count <- products_transaction %>%
count(Category)
category_count <-  category_count %>% rename(Count = n)
category_count
ggplot(category_count, aes(x= Category, y=Count)) +
geom_bar(stat = "identity", fill = "skyblue") +
labs(title = "Number of Transactions per Product Category",
x = "Product Category",
y = "Number of Transactions") +
theme_minimal()
transactions_data <- transactions_data %>%
mutate(Discounted_Amount = if_else(Total_Amount > 100, Total_Amount * 0.9, Total_Amount) )
merged_data <- transactions_data %>%
inner_join(customer_data, by="Customer_ID")
location_summary <- merged_data %>%
group_by(Location) %>%
summarize(
Number_of_Transactions = n(),
Total_Amount_Spent = sum(Amount, na.rm = TRUE)
) %>%
arrange(desc(Number_of_Transactions))
location_summary <- merged_data %>%
group_by(Location) %>%
summarize(
Number_of_Transactions = n(),
Total_Amount_Spent = sum(Total_Amount, na.rm = TRUE)
) %>%
arrange(desc(Number_of_Transactions))
location_summary
transactions_2023 <- transactions_2023 %>%
mutate(Month = floor_date(Date, "Month"))
frequent_customers <- transactions_2023 %>%
group_by(Customer_ID, Month) %>%
summarize(number_of_purchases = n()) %>%
ungroup() %>%
filter(number_of_purchases >= 3) %>%
distinct(Customer_ID)
frequent_customers
monthly_purchases <- transactions_2023 %>%
group_by(Customer_ID, Month) %>%
summarize(number_of_purchases = n()) %>%
ungroup()
monthly_purchases <- transactions_2023 %>%
group_by(Customer_ID, Month) %>%
summarise(number_of_purchases = n()) %>%
ungroup()
monthly_purchases
qualified_customers <-  monthly_purchases %>%
filter(number_of_purchases >= 3)
qualified_customers
frequent_customers <- qualified_customers %>%
group_by(Customer_ID) %>%
summarize(month_qualified = n_distinct(Month)) %>%
filter(month_qualified == 12) %>%
distinct(Customer_ID)
frequent_customers
merged_data <-transactions_data %>%
inner_join(products_data, by="Product_ID")
electronics_data <- merged_data %>%
filter(Category == "Electronics")
ggplot(electronics_data, aes(x=Quantity, y= Total_Amount, color = Store_Location)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, color="black") +
labs(
title = "Scatter Plot of Total Amount vs. Quantity for Electronics Category",
x = "Quantity",
y=" Total Amount",
color = "Store Location"
) +
theme_minimal()
location_summary
# Assignment 1 for BUSI 5100
#
#
#
# Full Name: Hassan Mehmood
# Student ID: 100993290
# Email Address: hassan.mehmood@ontariotechu.net
#
#
#
#Load all required libraries here:----
# importing required librarires and dependencies:
library(tidyverse)
library(dplyr)
library(ggplot2)
library(readr)
# Question 1 answer:----
# importing customer data:
customers_data <- read_csv("G:/My Drive/MBAI/BusinessAnalytics/Assignments/Assignment1/customers_data.csv")
# importing products data:
products_data <- read_csv("G:/My Drive/MBAI/BusinessAnalytics/Assignments/Assignment1/products_data.csv")
#importing transactions data:
transactions_data <- read_csv("G:/My Drive/MBAI/BusinessAnalytics/Assignments/Assignment1/transactions_data.csv")
# displaying the first 10 rows for sanity check:
head(transactions_data, 10)
# verifying the data structure:
is_tibble(customers_data)
# Question 2 answer:----
# customer_data --> [Rows: 2500, columns: 11],
# products_data --> [Rows:100 , Columns:6],
# transactions_data --> [Rows:15033, Columns:11]
## Date datatype needs to be changed
# To view the number of rows and columns and the datatype of data stored.
glimpse(customers_data)
glimpse(products_data)
glimpse(transactions_data)
transactions_data$Date <- as.Date(transactions_data$Date, format = "%m/%d/%Y")
# Question 3 answer:----
# 7474 transactions occurred in 2023
# making a new table by filtering the the transactions data based on the
# Year column to only isnclude the year 2023
transactions_2023 <- transactions_data %>%
filter(Year == 2023)
# Displaying the first 10 rows:
head(transactions_2023, 10)
# To get the number of rows in the new tibble:
glimpse(transactions_2023)
# Question 4 answer:----
# making the new table to store the summarized data:
customer_summary <- transactions_data %>%
#Grouping by customer id as it is unique for each customer:
group_by(Customer_ID) %>%
#summarizing the previous output to get the count and the total amount spent:
summarise(
Number_of_Transactions = n(),
Total_Amount_Spent = sum(Total_Amount)
)
#displaying the first 10 rows:
head(customer_summary, 10)
# Question 5 answer:----
# making the new tibble premium customers:
premium_customers <- customers_data %>%
#joining the customer summary table
inner_join(customer_summary, by="Customer_ID") %>%
#filtering based on the total amount spent:
filter(Total_Amount_Spent >= 10000) %>%
#renaming the column:
rename(Total_Transaction = Total_Amount_Spent) %>%
#dropping the column that is not required in the final output:
select(-Number_of_Transactions)
# sanity check:
glimpse(premium_customers)
# Question 6 answer:----
# making the new tibble:
products_transaction <- transactions_data %>%
# joinning the products data:
inner_join(products_data, by="Product_ID") %>%
# grouping by Category:
group_by(Category) %>%
# calculating the total number od transactions by category:
summarise(Number_of_Transactions= n())
products_transaction
# generating the bar plot
ggplot(products_transaction,
#setting up the aesthetics:
aes(x= Category, y=Number_of_Transactions)) +
# setting up the bar plot
geom_bar(stat = "identity", fill = "#FF8C00") +
#setting up the titles and labels:
labs(title = "Number of Transactions by Product category",
x = "Products Category",
y = "Number of Transactions") +
theme_minimal()
# Question 7 answer:----
# setting up the discount
Discount = 0.10
# adding the new column:
transactions_data <- transactions_data %>%
#applying the discount only if the amount is greater than 100:
mutate(Discounted_Amount = ifelse(Total_Amount > 100, Total_Amount * (1 - Discount), Total_Amount))
# sanity check:
head(transactions_data)
# Question 8 answer:----
# merging the data sets:
merged_data <- merge(customers_data, transactions_data, by= "Customer_ID")
# making the new tibble location summary to hold the resulting data:
location_summary <- merged_data %>%
#grouping by customer id and location since the amount spent should be by each customer at available store options:
group_by(Customer_ID, Store_Location) %>%
#summarizing to find the total number of transactions and sum of total amount spent by each customer at each store:
summarise(
Number_of_Tranactions = n(),
Total_Amount_Spent = sum(Total_Amount)
) %>%
# arranging in descending order:
arrange(desc(Number_of_Tranactions))
# sanity check:
location_summary
# Question 9 answer:----
#making the new tibble:
frequent_customers <- transactions_2023 %>%
# grouping by customer id and month
group_by(Customer_ID, Month) %>%
# counting the total number of transactions by each customer in a single month:
summarise(Transactions = n()) %>%
# filtering based on the minimum number of purchases made:
filter(Transactions >= 3) %>%
# getting the Customers ID:
distinct(Customer_ID)
# sanity check:
frequent_customers
# Question 10 answer:----
# making the new tibble:
frequent_customers <- transactions_data %>%
# grouping by customer id and month
group_by(Month, Customer_ID) %>%
summarise(Transactions = n()) %>%
# filtering based on the minimum number of purchases made:
filter(Transactions >= 3) %>%
group_by(Customer_ID) %>%
# Counting how many distinct months each customer qualified:
summarise(Purchases_Month = n_distinct(Month)) %>%
# Keep customers who made >= 3 purchases in all 12 months
filter(Purchases_Month == 12) %>%
# Selecting only the Customer_ID
select(Customer_ID)
# sanity check:
frequent_customers
# Question 11 answer:----
#merging the two datasets:
merged_transactions_products <- merge(transactions_data, products_data, by= "Product_ID")
# filtering the merged data sets based on if the category is "Electronics":
electronics_data <- merged_transactions_products %>%
filter(Category == "Electronics")
#sanity check:
electronics_data
# making the scatter plot with aesthetics using store location for colors:
ggplot(electronics_data,
aes(x=Quantity, y=Total_Amount, )) +
# adding points to the scatter plot
geom_point(aes(colour = Store_Location)) +
# adding the trend line with out the confidence interval hence se = FALSE:
geom_smooth(method = "lm", se = FALSE) +
#setting up the appropriate labels and title:
labs(
title = "Total Amount vs. Quantity for Electronics Transactions",
x = "Quantity Purchased",                    # Label for x-axis
y = "Total Amount Spent",                    # Label for y-axis
color = "Store Location"
) +
# for clean presentation:
theme_minimal()
# making the new tibble:
frequent_customers <- transactions_data %>%
# grouping by customer id and month
group_by(Month, Customer_ID) %>%
summarise(Transactions = n()) %>%
# filtering based on the minimum number of purchases made:
filter(Transactions >= 3) %>%
group_by(Customer_ID) %>%
# Counting how many distinct months each customer qualified:
summarise(Purchases_Month = n_distinct(Month)) %>%
# Keep customers who made >= 3 purchases in all 12 months
filter(Purchases_Month == 12) %>%
# Selecting only the Customer_ID
select(Customer_ID)
frequent_customers
frequent_customers <- transactions_data %>%
# grouping by customer id and month
group_by(Month, Customer_ID) %>%
summarise(Transactions = n()) %>%
# filtering based on the minimum number of purchases made:
filter(Transactions >= 3) %>%
group_by(Customer_ID) %>%
# Counting how many distinct months each customer qualified:
summarise(Purchases_Month = n_distinct(Month)) %>%
# Keep customers who made >= 3 purchases in all 12 months
filter(Purchases_Month == 12) %>%
frequent_customers
frequent_customers <- transactions_data %>%
# grouping by customer id and month
group_by(Month, Customer_ID) %>%
summarise(Transactions = n()) %>%
# filtering based on the minimum number of purchases made:
filter(Transactions >= 3) %>%
group_by(Customer_ID) %>%
# Counting how many distinct months each customer qualified:
summarise(Purchases_Month = n_distinct(Month)) %>%
# Keep customers who made >= 3 purchases in all 12 months
filter(Purchases_Month == 12) %>%
frequent_customers
frequent_customers <- transactions_data %>%
# grouping by customer id and month
group_by(Month, Customer_ID) %>%
summarise(Transactions = n()) %>%
# filtering based on the minimum number of purchases made:
filter(Transactions >= 3) %>%
group_by(Customer_ID) %>%
# Counting how many distinct months each customer qualified:
summarise(Purchases_Month = n_distinct(Month)) %>%
# Keep customers who made >= 3 purchases in all 12 months
filter(Purchases_Month == 12) #
frequent_customers
frequent_customers <- transactions_data %>%
# grouping by customer id and month
group_by(Month, Customer_ID) %>%
summarise(Transactions = n()) %>%
# filtering based on the minimum number of purchases made:
filter(Transactions >= 3) %>%
#group_by(Customer_ID) %>%
# Counting how many distinct months each customer qualified:
summarise(Purchases_Month = n_distinct(Month)) %>%
# Keep customers who made >= 3 purchases in all 12 months
filter(Purchases_Month == 12) #%>%
frequent_customers
# making the new tibble:
frequent_customers <- transactions_data %>%
# grouping by customer id and month
group_by(Month, Customer_ID) %>%
summarise(Transactions = n()) %>%
# filtering based on the minimum number of purchases made:
filter(Transactions >= 3) %>%
#group_by(Customer_ID) %>%
# Counting how many distinct months each customer qualified:
summarise(Purchases_Month = n_distinct(Month)) %>%
# Keep customers who made >= 3 purchases in all 12 months
filter(Purchases_Month == 12) #%>%
setwd("G:/My Drive/MBAI/BusinessAnalytics/FinalProject/HousingMarket-BA")
library(dplyr)
recession_indicator <- read.csv("./CanadaRecessionIndicator.csv")
rates <-read.csv("./clean_rates.csv")
home_prices <- read.csv("./GTA_HomePrice_History.csv")
primary_keys <- read.csv("./prim_key.csv")
# head(primary_keys)
#
# print(colnames(home_prices))
#
# null_counts
#
#
# count_nulls <- function (data) {
#   if (!is.data.frame(data)) {
#     stop("Input must be a data frame")
#   }
#   null_counts <- sapply(data, function(x) sum(is.na(x)))
#
#   return(null_counts)
# }
#
#
# nulls_recession <-count_nulls((recession_indicator))
# nulls_recession
#
# nulls_home_prices <- count_nulls(home_prices)
# nulls_home_prices
#
# nulls_rates <- count_nulls(rates)
# nulls_rates
#
# nulls_primary <- count_nulls(primary_keys)
# nulls_primary
#
#
#
#
# duplicates_recession <- recession_indicator[duplicated(recession_indicator), ]
# duplicates_recession
#
# home_prices[duplicated(home_prices), ]
# writing a function for the above mentioned code for reusability:
data_q_report <- function(data) {
if (!is.data.frame(data)) {
stop("Input must be a data frame.")
}
# 1. View Columns
cat("Column Names:\n")
print(colnames(data))
# 2. Check for Nulls
null_counts <- sapply(data, function(x) sum(is.na(x)))
cat("\nNull counts per column:\n")
print(null_counts)
# Identify columns with any null values
columns_with_nulls <- colnames(data)[apply(data, 2, anyNA)]
cat("\nColumns with null values:\n")
print(columns_with_nulls)
# 3. Check for Duplicates
duplicates <- data[duplicated(data), ]
cat("\nDuplicate rows:\n")
print(duplicates)
# 4. Summary Report
cat("\nSummary Report:\n")
cat("Total Columns:", ncol(data), "\n")
cat("Total Rows:", nrow(data), "\n")
cat("Columns with Nulls:", paste(columns_with_nulls, collapse = ", "), "\n")
cat("Number of Duplicate Rows:", nrow(duplicates), "\n")
}
data_q_report(recession_indicator)
data_list <- list(recession_data=recession_indicator, homePrices = home_prices, primaryKeys = primary_keys, interestR=rates)
for (data in names(data_list)) {
cat("\nData Quality report for", data, ":\n")
data_q_report(data_list[[data]])
}
head(home_prices)
merged_data <- merge(home_prices, recession_indicator, by = "Year_Quarter_Key")
merged_data
head(merged_data)
prices_recession <- merge(home_prices, recession_indicator, by = "Year_Quarter_Key")
merged_data <- merge(prices_recession, rates, by = "Year_Quarter_Key")
head(merged_data)
data_q_report(merged_data)
library(ggplot)
library(ggplot2)
library(corrplot)
install.packages('corrplot')
library(ggplot2)
#install.packages('corrplot')
library(corrplot)
library(stats)
summary_stats <-  merged_data %>%
select(Sales, Dollar_Volume, Average_Price, New_Listings, Average_SP_LP, Average_DOM) %>%
summary()
print(summary_stats)
numeric_cols <- c("Sales", "Dollar_Volume", "Average_Price", "New_Listings", "Average_SP_LP", "Average_DOM")
for (col in numeric_cols) {
ggplot(data, aes_string(x = col)) +
geom_histogram(bins = 30, fill = "skyblue", color = "black") +
ggtitle(paste("Distribution of", col)) +
theme_minimal()
}
numeric_cols <- c("Sales", "Dollar_Volume", "Average_Price", "New_Listings", "Average_SP_LP", "Average_DOM")
for (col in numeric_cols) {
ggplot(data, aes(x = col)) +
geom_histogram(bins = 30, fill = "skyblue", color = "black") +
ggtitle(paste("Distribution of", col)) +
theme_minimal()
}
numeric_cols <- c("Sales", "Dollar_Volume", "Average_Price", "New_Listings", "Average_SP_LP", "Average_DOM")
for (col in numeric_cols) {
ggplot(merged_data, aes(x = col)) +
geom_histogram(bins = 30, fill = "skyblue", color = "black") +
ggtitle(paste("Distribution of", col)) +
theme_minimal()
}
ggplot(merged_data, aes(x = Year_Quarter_Key, y = Average_Price)) +
geom_line(color = "blue") +
labs(title = "Average Price over Time", x = "Year Quarter", y = "Average Price") +
theme_minimal()
ggplot(merged_data, aes(x = Year, y = Average_Price)) +
geom_line(color = "blue") +
labs(title = "Average Price over Time", x = "Year Quarter", y = "Average Price") +
theme_minimal()
ggplot(merged_data, aes(x = X_Year.x, y = Average_Price)) +
geom_line(color = "blue") +
labs(title = "Average Price over Time", x = "Year Quarter", y = "Average Price") +
theme_minimal()
ggplot(merged_data, aes(x = X_Year.x, y = Average_Price)) +
geom_bar(color = "blue") +
labs(title = "Average Price over Time", x = "Year Quarter", y = "Average Price") +
theme_minimal()
ggplot(merged_data, aes(x = X_Year.x, y = Average_Price)) +
geom_bar() +
labs(title = "Average Price over Time", x = "Year Quarter", y = "Average Price") +
theme_minimal()
ggplot(merged_data, aes(x = X_Year.x, y = Average_Price)) +
geom_col() +
labs(title = "Average Price over Time", x = "Year Quarter", y = "Average Price") +
theme_minimal()
numeric_cols <- c("Sales", "Dollar_Volume", "Average_Price", "New_Listings", "Average_SP_LP", "Average_DOM")
for (col in numeric_cols) {
ggplot(merged_data, aes(x = col)) +
geom_histogram(bins = 30, fill = "skyblue", color = "black") +
ggtitle(paste("Distribution of", col)) +
theme_minimal()
}
